<project name="PNE" default="build" basedir=".">
	
	<description>Personal Name Extractor</description>
	
    <!--
    ================
    BUILD PROPERTIES
    ================
    -->
  	<property name="src.main" location="src/main/java/edu/odu/cs/cs350/namex"/>
  	<property name="src.test" location="src/test/java/edu/odu/cs/cs350/namex"/>
  	<property name="build" location="target/classes"/>
  	<property name="dist" location="target"/>
  	<property name="lib" location="lib"/>

	<import file="ivy.build.xml"/>
	
	<path id="classpath">
		<fileset dir="lib">
			<include name="**/*.jar"/>
		</fileset>
	</path>
	
	<path id="test.compilation.path">
		<pathelement path="${src.main}"/>
	  	<pathelement path="${src.test}"/>
		<pathelement path="target/classes"/>
		<path refid="ivy.classpath"/>
	</path>
	
	<path id="main.compilation.path">
		<pathelement path="${src.main}"/>
		<pathelement path="target/classes"/>
		<path refid="ivy.classpath"/>
	</path>
	
	<path id="test.compilation.path">
		<pathelement path="target/classes"/>
		<fileset dir="${lib}" includes="**/*.jar"/>
	</path>	
		
	<path id="test.execution.path">
		<pathelement path="target/test-classes"/>
		<path refid="test.compilation.path"/>
	</path>	

    <!--
    ===========
    INIT TARGET
    ===========
    -->
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="target/classes"/>
		<mkdir dir="${lib}"/>
		
	</target>
	
    <!--
    ==============
    COMPILE TARGET
    ==============
    -->
	<target name="compile" depends="init" description="Compile all non-test source code.">
		<mkdir dir="target/classes"/>
		<javac srcdir="src/main/java" destdir="target/classes" source="1.7" optimize="on" debug="on" includeantruntime="false"></javac>
	</target>

    <!--
    ====================
    COMPILE-TESTS TARGET
    ====================
    -->
	<target name="compile-tests" depends="compile" description="Compile JUnit tests">
		<mkdir dir="target/test-classes"/>
		<javac srcdir="src/test/java" destdir="target/test-classes" source="1.7" optimize="on" debug="on" includeantruntime="false">
			<classpath refid="test.compilation.path"/>
		</javac>
	</target>
	
    <!--
    ===========
    TEST TARGET
    ===========
    -->
	<target name="test" depends="compile-tests" description="Run all unit tests, producing a summary report in target/test-results.">
		<mkdir dir="target/test-results"/>
		<junit haltonfailure="no" fork="yes">
			<classpath refid="test.execution.path"/>
			<formatter type="plain" usefile="false"/>
			<!--  output to screen  -->
			<formatter type="xml"/>
			<!--  output to files in target/test-results  -->
			<batchtest todir="target/test-results">
			<fileset dir="target/test-classes">
				<include name="**/*Test*.class"/>
				<exclude name="**/*$*.class"/>
			</fileset>
			</batchtest>
		</junit>
	</target>
	
    <!--
    ==============
    PACKAGE TARGET
    ==============
    -->
	<target name="package" depends="test" description="Construct a jar file with the compiled code and a zip file with the project source code.">
		<jar destfile="target/PNE.jar" basedir="target/classes">
		<!--
		 Uncomment if you have a main class to execute by default.
		-->
		      <manifest>
		        <attribute name="Main-Class"
		                   value="edu.odu.cs.cs350.namex.Librarian"/>
		      </manifest>    
		</jar>
	</target>
	
    <!--
    =================
    GENERATE JAVADOCS
    =================
    -->
    <!-- Generate javadocs for current project into ${doc.dir} -->
    <target name = "generate-javadoc" depends="package" description="generate documentation">
    	
		<javadoc packagenames="personalNameExtractor" sourcepath="${src.main}" 
			destdir = "${dist}/doc" version = "true" 
			windowtitle = "Personal Name Extractor">
       	
        <fileset dir = "${src.main}">
			<include name = "**/*.java"/>
		</fileset>  
			
		<doctitle><![CDATA[= Personal Name Extractor =]]></doctitle>
      
       </javadoc>
    </target>
	
    <!--
    ============
    BUILD TARGET
    ============
    -->
	<target name="build" depends="generate-javadoc" description="Construct a jar and source files and assorted reports.">
		<!--
		<ivy:cachefileset conf="build" setid="runtime.fileset" />
		<jar destfile="target/MyJavaApplication.jar" basedir="target/classes">                           
			<zipgroupfileset refid="runtime.fileset"/>             
			<manifest>
				<attribute name="Main-Class" value="edu.odu.cs.cs350.MainClassName"/> 
			</manifest>
		</jar> -->
		
	</target>
	
    <!--
    ============
    CLEAN TARGET
    ============
    -->
	<target name="clean" description="clean up">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}"/>
		<delete dir="${dist}"/>  
		<delete dir="${lib}"/>  
	</target>
	
</project>
		
		
		
		
<!-- *************************sample build.xml

		<project xmlns:ivy="antlib:org.apache.ivy.ant" name="dateUtilsProject" default="main" basedir=".">
	<description>
		Create a Java Project (JAR) with Ant build script
	</description>

	<property name="projectName" value="DateUtils" />
	<property name="src.dir" location="src" />
	<property name="build.dir" location="bin" />
	<property name="dist.dir" location="dist" />
	<property name="dist.lib.dir" location="dist/lib" />
	<property name="lib.dir" value="lib" />
	<property name="main-class" value="com.mkyong.core.utils.DateUtils" />

	<!-- ivy start -->
	<!-- ivy to get dependencies and copy to project lib folder automatically --> 
<!--
	<target name="resolve" description="retrieve dependencies with ivy">
		<ivy:retrieve />
	</target>

	<!-- install ivy -->
<!--
	<target name="ivy" description="Install ivy">
		<mkdir dir="${user.home}/.ant/lib" />
		<get dest="${user.home}/.ant/lib/ivy.jar" 
                    src="http://search.maven.org/remotecontent?filepath=org/apache/ivy/ivy/2.4.0-rc1/ivy-2.4.0-rc1.jar" />
	</target>
	<!-- ivy end -->
<!--
	<target name="init">
		<mkdir dir="${build.dir}" />
	</target>

	<path id="classpath">
		<fileset dir="${basedir}/">
			<include name="${lib.dir}/*.jar" />
		</fileset>
	</path>

	<!-- Need classpath to run this -->
<!--		
	<target name="compile" depends="init" description="compile the source ">
		<javac includeantruntime="false" srcdir="${src.dir}" 
                       destdir="${build.dir}" classpathref="classpath" />
	</target>

	<!-- Group all dependencies into a big dependency-all.jar -->
<!--
		<target name="copy-dependencies">

		<mkdir dir="${dist.lib.dir}" />

		<jar jarfile="${dist.lib.dir}/dependencies-all.jar">
			<zipgroupfileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</zipgroupfileset>
		</jar>

	</target>

	<!-- jar it, extract above dependency-all.jar and zip it with project files -->
<!--	
		<target name="jar" depends="compile, copy-dependencies" 
                description="package, output to JAR">

		<mkdir dir="${dist.dir}" />
		<mkdir dir="${dist.lib.dir}" />

		<jar jarfile="${dist.dir}/${projectName}.jar" basedir="${build.dir}">
			<manifest>
				<attribute name="Main-Class" value="${main-class}" />
			</manifest>
			<zipfileset src="${dist.lib.dir}/dependencies-all.jar" 
                                excludes="META-INF/*.SF" />
		</jar>

	</target>

	<target name="clean" description="clean up">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<!-- Default, run this -->
<!--		
	<target name="main" depends="clean, compile, jar" />

</project>
		
		
		-->